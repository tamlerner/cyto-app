'use client';

import jsPDF from 'jspdf';
import { format } from 'date-fns';
import { validateInvoiceData } from './utils/format';
import { drawHeader } from './sections/header';
import { drawItemsTable } from './sections/items-table';
import { drawTotals } from './sections/totals';
import type { Invoice, InvoiceItem } from '@/lib/types';

interface GeneratePDFOptions {
  invoice: Invoice & {
    client: {
      company_name: string;
      tax_id: string;
      headquarters_address: string;
      city: string;
      region: string;
      postal_code: string;
      country: string;
    };
    company: {
      company_name: string;
      tax_id: string;
      headquarters_address: string;
      city: string;
      region: string;
      postal_code: string;
      country: string;
    };
  };
  items: InvoiceItem[];
}

export async function generateInvoicePDF({ invoice, items }: GeneratePDFOptions): Promise<Blob> {
  try {
    validateInvoiceData(invoice, items);

    const doc = new jsPDF();
    let yPos = 20;

    // Draw header section
    yPos = drawHeader(doc, invoice.company, {
      number: invoice.invoice_number,
      date: format(new Date(invoice.issue_date), 'PP'),
      dueDate: format(new Date(invoice.due_date), 'PP'),
    });

    // Draw client info
    yPos += 10;
    doc.text('Bill To:', 20, yPos);
    yPos += 7;

    const clientInfo = [
      invoice.client.company_name,
      invoice.client.tax_id,
      invoice.client.headquarters_address,
      `${invoice.client.city}, ${invoice.client.region}`,
      `${invoice.client.postal_code}, ${invoice.client.country}`,
    ];

    clientInfo.forEach(line => {
      doc.text(line, 20, yPos);
      yPos += 6;
    });

    // Draw items table
    yPos = drawItemsTable(doc, items, invoice.currency, yPos + 10);

    // Draw totals
    yPos = drawTotals(doc, invoice, yPos);

    // Draw footer
    const footerY = doc.internal.pageSize.getHeight() - 20;
    doc.setFontSize(10);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by CYTO', doc.internal.pageSize.getWidth() / 2, footerY, { align: 'center' });

    return doc.output('blob');
  } catch (error) {
    console.error('PDF generation failed:', error);
    throw error;
  }
}